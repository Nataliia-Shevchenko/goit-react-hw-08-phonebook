{"version":3,"file":"static/js/346.21cd0ded.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ModalUpdateContact/ModalUpdateContact.styled.jsx","components/ModalUpdateContact/ModalUpdateContact.jsx","components/ContactElement/ContactElement.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContactsList = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContactsList, selectFilter],\n  (contacts, { filter }) => {\n\n    return contacts.toSorted((a, b) => a.name.localeCompare(b.name)).filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n  margin-bottom: 30px;\n  min-width: 200px;\n  padding: 20px;\n  border-radius: 30px;\n  background-color: #c2e6f3;\n  box-shadow: 2px 2px 2px 1px rgba(0, 0, 0, 0.2);\n`","import { useDispatch, useSelector } from 'react-redux';\nimport { Form } from './ContactForm.styled';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContactsList } from 'redux/contacts/selectors';\nimport { toast } from 'react-hot-toast';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectContactsList);\n\n  const dispatch = useDispatch();\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n\n    if (contacts.find(contact => contact.name === form.elements.name.value)) {\n      toast.error(`${form.elements.name.value} is already in contacts`);\n      return;\n    }\n    dispatch(\n      addContact({\n        name: form.elements.name.value,\n        number: form.elements.number.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <>\n      <Form onSubmit={handleFormSubmit}>\n        <TextField\n          required\n          label=\"Name\"\n          type=\"text\"\n          variant=\"outlined\"\n          name=\"name\"\n          size=\"small\"\n          pattern=\"^[a-zA-Za-яА-Я]+(([' -][a-zA-Za-яА-Я ])?[a-zA-Za-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        />\n        <TextField\n          required\n          label=\"Number\"\n          type=\"tel\"\n          variant=\"outlined\"\n          name=\"number\"\n          size=\"small\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        />\n\n        <Button type=\"submit\" variant=\"contained\">\n          Add contact\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n  padding: 30px;\n`;\n","import { useState } from 'react';\nimport { updateContact } from 'redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Modal from '@mui/material/Modal';\nimport EditIcon from '@mui/icons-material/Edit';\nimport TextField from '@mui/material/TextField';\nimport { Form } from './ModalUpdateContact.styled';\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 250,\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  borderRadius: '10px',\n  boxShadow: 24,\n  p: 2,\n};\n\nconst ModalUpdateContact = ({ contact }) => {\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  const { id, name, number } = contact;\n  const [contactItem, setContactItem] = useState({\n    name,\n    number,\n  });\n\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setContactItem({ [name]: value });\n  };\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    dispatch(\n      updateContact({\n        id,\n        name: form.elements.name.value,\n        number: form.elements.number.value,\n      })\n    );\n    handleClose();\n  };\n\n  return (\n    <div>\n      <Button size=\"small\" startIcon={<EditIcon />} onClick={handleOpen}>\n        Edit\n      </Button>\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"modal-update-contact\"\n        aria-describedby=\"modal-update-contact\"\n      >\n        <Box sx={style}>\n          <Form onSubmit={handleFormSubmit}>\n            <TextField\n              required\n              label=\"Name\"\n              type=\"text\"\n              name=\"name\"\n              value={contactItem.name}\n              onChange={handleChange}\n              size=\"normal\"\n              variant=\"standard\"\n              pattern=\"^[a-zA-Za-яА-Я]+(([' -][a-zA-Za-яА-Я ])?[a-zA-Za-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            />\n            <TextField\n              required\n              label=\"Number\"\n              type=\"tel\"\n              name=\"number\"\n              value={contactItem.number}\n              onChange={handleChange}\n              size=\"normal\"\n              variant=\"standard\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            />\n            <Button type=\"submit\">Save</Button>\n            <Button onClick={handleClose}>Close</Button>\n          </Form>\n        </Box>\n      </Modal>\n    </div>\n  );\n};\nexport default ModalUpdateContact;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport AccountCircleOutlinedIcon from '@mui/icons-material/AccountCircleOutlined';\nimport PhoneIcon from '@mui/icons-material/Phone';\nimport ModalUpdateContact from 'components/ModalUpdateContact/ModalUpdateContact';\n\nconst ContactElement = ({ contact }) => {\n  const { id, name, number } = contact;\n\n  const dispatch = useDispatch();\n\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <>\n      <Card sx={{ minWidth: 150 }}>\n        <CardContent sx={{ backgroundColor: '#faf8a2' }}>\n          <Typography variant=\"h6\">\n            <AccountCircleOutlinedIcon sx={{ color: 'blue' }} /> {name}\n          </Typography>\n          <Typography variant=\"h5\">\n            <PhoneIcon sx={{ color: 'blue' }} /> {number}\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <Button\n            size=\"small\"\n            onClick={handleDelete}\n            startIcon={<DeleteIcon />}\n          >\n            Delete\n          </Button>\n          <ModalUpdateContact contact={contact} />\n        </CardActions>\n      </Card>\n    </>\n  );\n};\n\nexport default ContactElement;\n\nContactElement.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import React from 'react';\nimport ContactElement from 'components/ContactElement';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\n\nconst ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <Grid\n        container\n        spacing={{ xs: 2, md: 3 }}\n        columns={{ xs: 4, sm: 8, md: 12 }}\n      >\n        {visibleContacts &&\n          visibleContacts.map(contact => (\n            <Grid item xs={2} sm={4} md={4} key={contact.id}>\n              <ContactElement contact={contact} />\n            </Grid>\n          ))}\n      </Grid>\n    </Box>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport TextField from '@mui/material/TextField';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport SearchIcon from '@mui/icons-material/Search';\n\nconst Filter = () => {\n  const { filter } = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n\n  const handleFilterChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <>\n      <TextField\n        value={filter}\n        onChange={handleFilterChange}\n        variant=\"outlined\"\n        label=\"Search contact\"\n        type=\"text\"\n        placeholder=\"Find contact by name\"\n        fullWidth\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <SearchIcon />\n            </InputAdornment>\n          ),\n        }}\n        sx={{\n          marginBottom: '20px',\n        }}\n      />\n    </>\n  );\n};\n\nexport default Filter;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Typography variant=\"h5\" textTransform=\"uppercase\" margin=\"15px\">\n        My contacts\n      </Typography>\n      <Box\n        sx={{\n          padding: '20px',\n          alignItems: 'start',\n          gap: '20px',\n        }}\n      >\n        <ContactForm />\n        <div>\n          <Filter />\n          {isLoading && !error && (\n            <p>\n              <b>Request in progress...</b>\n            </p>\n          )}\n          <ContactList />\n        </div>\n      </Box>\n    </>\n  );\n};\nexport default ContactsPage;\n"],"names":["selectContactsList","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectVisibleContacts","createSelector","toSorted","a","b","name","localeCompare","contact","toLowerCase","includes","Form","styled","useSelector","dispatch","useDispatch","onSubmit","e","preventDefault","form","target","find","elements","value","toast","addContact","number","reset","TextField","required","label","type","variant","size","pattern","title","Button","style","position","top","left","transform","width","bgcolor","border","borderRadius","boxShadow","p","useState","open","setOpen","handleClose","id","contactItem","setContactItem","handleChange","startIcon","Edit","onClick","Modal","onClose","Box","sx","updateContact","onChange","Card","minWidth","CardContent","backgroundColor","Typography","AccountCircleOutlined","color","Phone","CardActions","deleteContact","Delete","visibleContacts","flexGrow","Grid","container","spacing","xs","md","columns","sm","map","item","setFilter","placeholder","fullWidth","InputProps","startAdornment","InputAdornment","Search","marginBottom","useEffect","fetchContacts","textTransform","margin","padding","alignItems","gap"],"sourceRoot":""}